# 문제 정의
# 정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.
# 1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
# 2. X가 2로 나누어 떨어지면, 2로 나눈다.
# 3. 1을 뺀다.
# 정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력

# 의사 코드
# func() 함수 정의:
#     dp 배열 생성 
#     dp[1]은 이미 값이 1이므로 계산 할 필요가 없어 2부터 n+1까지 반복:
#         dp[i]는 1을 뺄 경우 최소 연산 횟수에 1 더하기
#         만약 2로 나누어 떨어질 경우:
#             dp[i]는 1을 뺐을 때의 횟수와 2로 나눴을 때 횟수 중 최소값 저장
#         만약 3으로 나누어 떨어질 경우:
#             dp[i]는 앞에 계산한 횟수와 3으로 나눴을 때 횟수랑 비교해 최소값 저장
#     dp[n] 반환

def func(n):
    dp = [0] * (n + 1)
    for i in range(2, n + 1):
        dp[i] = dp[i - 1] + 1
        if i % 2 == 0:
            dp[i] = min(dp[i], dp[i // 2] + 1)
        if i % 3 == 0:
            dp[i] = min(dp[i], dp[i // 3] + 1)
    return dp[n]

n = int(input())
print(func(n))
